Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EQUAL
    GREATER
    LESS
    LPAREN
    RPAREN

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> expression_statement
Rule 5     statement -> conditional_statement
Rule 6     statement -> loop_statement
Rule 7     expression_statement -> ID ASSIGN expression
Rule 8     expression -> expression PLUS term
Rule 9     expression -> expression MINUS term
Rule 10    expression -> term
Rule 11    term -> term TIMES factor
Rule 12    term -> term DIVIDE factor
Rule 13    term -> factor
Rule 14    factor -> NUMBER
Rule 15    factor -> ID
Rule 16    conditional_statement -> IF expression statement ELSE statement
Rule 17    conditional_statement -> IF expression statement
Rule 18    loop_statement -> WHILE expression statement

Terminals, with rules where they appear

ASSIGN               : 7
DIVIDE               : 12
ELSE                 : 16
EQUAL                : 
GREATER              : 
ID                   : 7 15
IF                   : 16 17
LESS                 : 
LPAREN               : 
MINUS                : 9
NUMBER               : 14
PLUS                 : 8
RPAREN               : 
TIMES                : 11
WHILE                : 18
error                : 

Nonterminals, with rules where they appear

conditional_statement : 5
expression           : 7 8 9 16 17 18
expression_statement : 4
factor               : 11 12 13
loop_statement       : 6
program              : 0
statement            : 2 3 16 16 17 18
statement_list       : 1 3
term                 : 8 9 10 11 12

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . expression_statement
    (5) statement -> . conditional_statement
    (6) statement -> . loop_statement
    (7) expression_statement -> . ID ASSIGN expression
    (16) conditional_statement -> . IF expression statement ELSE statement
    (17) conditional_statement -> . IF expression statement
    (18) loop_statement -> . WHILE expression statement

    ID              shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    expression_statement           shift and go to state 4
    conditional_statement          shift and go to state 5
    loop_statement                 shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . expression_statement
    (5) statement -> . conditional_statement
    (6) statement -> . loop_statement
    (7) expression_statement -> . ID ASSIGN expression
    (16) conditional_statement -> . IF expression statement ELSE statement
    (17) conditional_statement -> . IF expression statement
    (18) loop_statement -> . WHILE expression statement

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    statement                      shift and go to state 10
    expression_statement           shift and go to state 4
    conditional_statement          shift and go to state 5
    loop_statement                 shift and go to state 6

state 3

    (2) statement_list -> statement .

    ID              reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> expression_statement .

    ID              reduce using rule 4 (statement -> expression_statement .)
    IF              reduce using rule 4 (statement -> expression_statement .)
    WHILE           reduce using rule 4 (statement -> expression_statement .)
    $end            reduce using rule 4 (statement -> expression_statement .)
    ELSE            reduce using rule 4 (statement -> expression_statement .)


state 5

    (5) statement -> conditional_statement .

    ID              reduce using rule 5 (statement -> conditional_statement .)
    IF              reduce using rule 5 (statement -> conditional_statement .)
    WHILE           reduce using rule 5 (statement -> conditional_statement .)
    $end            reduce using rule 5 (statement -> conditional_statement .)
    ELSE            reduce using rule 5 (statement -> conditional_statement .)


state 6

    (6) statement -> loop_statement .

    ID              reduce using rule 6 (statement -> loop_statement .)
    IF              reduce using rule 6 (statement -> loop_statement .)
    WHILE           reduce using rule 6 (statement -> loop_statement .)
    $end            reduce using rule 6 (statement -> loop_statement .)
    ELSE            reduce using rule 6 (statement -> loop_statement .)


state 7

    (7) expression_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 11


state 8

    (16) conditional_statement -> IF . expression statement ELSE statement
    (17) conditional_statement -> IF . expression statement
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIVIDE factor
    (13) term -> . factor
    (14) factor -> . NUMBER
    (15) factor -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    expression                     shift and go to state 12
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 9

    (18) loop_statement -> WHILE . expression statement
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIVIDE factor
    (13) term -> . factor
    (14) factor -> . NUMBER
    (15) factor -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    expression                     shift and go to state 17
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 10

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 11

    (7) expression_statement -> ID ASSIGN . expression
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIVIDE factor
    (13) term -> . factor
    (14) factor -> . NUMBER
    (15) factor -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    expression                     shift and go to state 18
    term                           shift and go to state 13
    factor                         shift and go to state 14

state 12

    (16) conditional_statement -> IF expression . statement ELSE statement
    (17) conditional_statement -> IF expression . statement
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term
    (4) statement -> . expression_statement
    (5) statement -> . conditional_statement
    (6) statement -> . loop_statement
    (7) expression_statement -> . ID ASSIGN expression
    (16) conditional_statement -> . IF expression statement ELSE statement
    (17) conditional_statement -> . IF expression statement
    (18) loop_statement -> . WHILE expression statement

    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    ID              shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    statement                      shift and go to state 19
    expression_statement           shift and go to state 4
    conditional_statement          shift and go to state 5
    loop_statement                 shift and go to state 6

state 13

    (10) expression -> term .
    (11) term -> term . TIMES factor
    (12) term -> term . DIVIDE factor

    PLUS            reduce using rule 10 (expression -> term .)
    MINUS           reduce using rule 10 (expression -> term .)
    ID              reduce using rule 10 (expression -> term .)
    IF              reduce using rule 10 (expression -> term .)
    WHILE           reduce using rule 10 (expression -> term .)
    $end            reduce using rule 10 (expression -> term .)
    ELSE            reduce using rule 10 (expression -> term .)
    TIMES           shift and go to state 22
    DIVIDE          shift and go to state 23


state 14

    (13) term -> factor .

    TIMES           reduce using rule 13 (term -> factor .)
    DIVIDE          reduce using rule 13 (term -> factor .)
    PLUS            reduce using rule 13 (term -> factor .)
    MINUS           reduce using rule 13 (term -> factor .)
    ID              reduce using rule 13 (term -> factor .)
    IF              reduce using rule 13 (term -> factor .)
    WHILE           reduce using rule 13 (term -> factor .)
    $end            reduce using rule 13 (term -> factor .)
    ELSE            reduce using rule 13 (term -> factor .)


state 15

    (14) factor -> NUMBER .

    TIMES           reduce using rule 14 (factor -> NUMBER .)
    DIVIDE          reduce using rule 14 (factor -> NUMBER .)
    PLUS            reduce using rule 14 (factor -> NUMBER .)
    MINUS           reduce using rule 14 (factor -> NUMBER .)
    ID              reduce using rule 14 (factor -> NUMBER .)
    IF              reduce using rule 14 (factor -> NUMBER .)
    WHILE           reduce using rule 14 (factor -> NUMBER .)
    $end            reduce using rule 14 (factor -> NUMBER .)
    ELSE            reduce using rule 14 (factor -> NUMBER .)


state 16

    (15) factor -> ID .

    TIMES           reduce using rule 15 (factor -> ID .)
    DIVIDE          reduce using rule 15 (factor -> ID .)
    PLUS            reduce using rule 15 (factor -> ID .)
    MINUS           reduce using rule 15 (factor -> ID .)
    ID              reduce using rule 15 (factor -> ID .)
    IF              reduce using rule 15 (factor -> ID .)
    WHILE           reduce using rule 15 (factor -> ID .)
    $end            reduce using rule 15 (factor -> ID .)
    ELSE            reduce using rule 15 (factor -> ID .)


state 17

    (18) loop_statement -> WHILE expression . statement
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term
    (4) statement -> . expression_statement
    (5) statement -> . conditional_statement
    (6) statement -> . loop_statement
    (7) expression_statement -> . ID ASSIGN expression
    (16) conditional_statement -> . IF expression statement ELSE statement
    (17) conditional_statement -> . IF expression statement
    (18) loop_statement -> . WHILE expression statement

    PLUS            shift and go to state 20
    MINUS           shift and go to state 21
    ID              shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    statement                      shift and go to state 24
    expression_statement           shift and go to state 4
    conditional_statement          shift and go to state 5
    loop_statement                 shift and go to state 6

state 18

    (7) expression_statement -> ID ASSIGN expression .
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    ID              reduce using rule 7 (expression_statement -> ID ASSIGN expression .)
    IF              reduce using rule 7 (expression_statement -> ID ASSIGN expression .)
    WHILE           reduce using rule 7 (expression_statement -> ID ASSIGN expression .)
    $end            reduce using rule 7 (expression_statement -> ID ASSIGN expression .)
    ELSE            reduce using rule 7 (expression_statement -> ID ASSIGN expression .)
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 19

    (16) conditional_statement -> IF expression statement . ELSE statement
    (17) conditional_statement -> IF expression statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 25
    ID              reduce using rule 17 (conditional_statement -> IF expression statement .)
    IF              reduce using rule 17 (conditional_statement -> IF expression statement .)
    WHILE           reduce using rule 17 (conditional_statement -> IF expression statement .)
    $end            reduce using rule 17 (conditional_statement -> IF expression statement .)

  ! ELSE            [ reduce using rule 17 (conditional_statement -> IF expression statement .) ]


state 20

    (8) expression -> expression PLUS . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIVIDE factor
    (13) term -> . factor
    (14) factor -> . NUMBER
    (15) factor -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    term                           shift and go to state 26
    factor                         shift and go to state 14

state 21

    (9) expression -> expression MINUS . term
    (11) term -> . term TIMES factor
    (12) term -> . term DIVIDE factor
    (13) term -> . factor
    (14) factor -> . NUMBER
    (15) factor -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    term                           shift and go to state 27
    factor                         shift and go to state 14

state 22

    (11) term -> term TIMES . factor
    (14) factor -> . NUMBER
    (15) factor -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    factor                         shift and go to state 28

state 23

    (12) term -> term DIVIDE . factor
    (14) factor -> . NUMBER
    (15) factor -> . ID

    NUMBER          shift and go to state 15
    ID              shift and go to state 16

    factor                         shift and go to state 29

state 24

    (18) loop_statement -> WHILE expression statement .

    ID              reduce using rule 18 (loop_statement -> WHILE expression statement .)
    IF              reduce using rule 18 (loop_statement -> WHILE expression statement .)
    WHILE           reduce using rule 18 (loop_statement -> WHILE expression statement .)
    $end            reduce using rule 18 (loop_statement -> WHILE expression statement .)
    ELSE            reduce using rule 18 (loop_statement -> WHILE expression statement .)


state 25

    (16) conditional_statement -> IF expression statement ELSE . statement
    (4) statement -> . expression_statement
    (5) statement -> . conditional_statement
    (6) statement -> . loop_statement
    (7) expression_statement -> . ID ASSIGN expression
    (16) conditional_statement -> . IF expression statement ELSE statement
    (17) conditional_statement -> . IF expression statement
    (18) loop_statement -> . WHILE expression statement

    ID              shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9

    statement                      shift and go to state 30
    expression_statement           shift and go to state 4
    conditional_statement          shift and go to state 5
    loop_statement                 shift and go to state 6

state 26

    (8) expression -> expression PLUS term .
    (11) term -> term . TIMES factor
    (12) term -> term . DIVIDE factor

    PLUS            reduce using rule 8 (expression -> expression PLUS term .)
    MINUS           reduce using rule 8 (expression -> expression PLUS term .)
    ID              reduce using rule 8 (expression -> expression PLUS term .)
    IF              reduce using rule 8 (expression -> expression PLUS term .)
    WHILE           reduce using rule 8 (expression -> expression PLUS term .)
    $end            reduce using rule 8 (expression -> expression PLUS term .)
    ELSE            reduce using rule 8 (expression -> expression PLUS term .)
    TIMES           shift and go to state 22
    DIVIDE          shift and go to state 23


state 27

    (9) expression -> expression MINUS term .
    (11) term -> term . TIMES factor
    (12) term -> term . DIVIDE factor

    PLUS            reduce using rule 9 (expression -> expression MINUS term .)
    MINUS           reduce using rule 9 (expression -> expression MINUS term .)
    ID              reduce using rule 9 (expression -> expression MINUS term .)
    IF              reduce using rule 9 (expression -> expression MINUS term .)
    WHILE           reduce using rule 9 (expression -> expression MINUS term .)
    $end            reduce using rule 9 (expression -> expression MINUS term .)
    ELSE            reduce using rule 9 (expression -> expression MINUS term .)
    TIMES           shift and go to state 22
    DIVIDE          shift and go to state 23


state 28

    (11) term -> term TIMES factor .

    TIMES           reduce using rule 11 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 11 (term -> term TIMES factor .)
    PLUS            reduce using rule 11 (term -> term TIMES factor .)
    MINUS           reduce using rule 11 (term -> term TIMES factor .)
    ID              reduce using rule 11 (term -> term TIMES factor .)
    IF              reduce using rule 11 (term -> term TIMES factor .)
    WHILE           reduce using rule 11 (term -> term TIMES factor .)
    $end            reduce using rule 11 (term -> term TIMES factor .)
    ELSE            reduce using rule 11 (term -> term TIMES factor .)


state 29

    (12) term -> term DIVIDE factor .

    TIMES           reduce using rule 12 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 12 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 12 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 12 (term -> term DIVIDE factor .)
    ID              reduce using rule 12 (term -> term DIVIDE factor .)
    IF              reduce using rule 12 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 12 (term -> term DIVIDE factor .)
    $end            reduce using rule 12 (term -> term DIVIDE factor .)
    ELSE            reduce using rule 12 (term -> term DIVIDE factor .)


state 30

    (16) conditional_statement -> IF expression statement ELSE statement .

    ID              reduce using rule 16 (conditional_statement -> IF expression statement ELSE statement .)
    IF              reduce using rule 16 (conditional_statement -> IF expression statement ELSE statement .)
    WHILE           reduce using rule 16 (conditional_statement -> IF expression statement ELSE statement .)
    $end            reduce using rule 16 (conditional_statement -> IF expression statement ELSE statement .)
    ELSE            reduce using rule 16 (conditional_statement -> IF expression statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 19 resolved as shift
