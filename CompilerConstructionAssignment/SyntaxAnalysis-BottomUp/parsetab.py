
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIVIDE ELSE EQUAL GREATER ID IF LESS LPAREN MINUS NUMBER PLUS RPAREN TIMES WHILEprogram : statement_liststatement_list : statement\n                      | statement_list statementstatement : expression_statement\n                 | conditional_statement\n                 | loop_statementexpression_statement : ID ASSIGN expressionexpression : expression PLUS term\n                  | expression MINUS termexpression : termterm : term TIMES factor\n            | term DIVIDE factorterm : factorfactor : NUMBERfactor : IDconditional_statement : IF expression statement ELSE statement\n                             | IF expression statementloop_statement : WHILE expression statement'
    
_lr_action_items = {'ID':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,],[7,7,-2,-4,-5,-6,16,16,-3,16,7,-10,-13,-14,-15,7,-7,-17,16,16,16,16,-18,7,-8,-9,-11,-12,-16,]),'IF':([0,2,3,4,5,6,10,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,],[8,8,-2,-4,-5,-6,-3,8,-10,-13,-14,-15,8,-7,-17,-18,8,-8,-9,-11,-12,-16,]),'WHILE':([0,2,3,4,5,6,10,12,13,14,15,16,17,18,19,24,25,26,27,28,29,30,],[9,9,-2,-4,-5,-6,-3,9,-10,-13,-14,-15,9,-7,-17,-18,9,-8,-9,-11,-12,-16,]),'$end':([1,2,3,4,5,6,10,13,14,15,16,18,19,24,26,27,28,29,30,],[0,-1,-2,-4,-5,-6,-3,-10,-13,-14,-15,-7,-17,-18,-8,-9,-11,-12,-16,]),'ELSE':([4,5,6,13,14,15,16,18,19,24,26,27,28,29,30,],[-4,-5,-6,-10,-13,-14,-15,-7,25,-18,-8,-9,-11,-12,-16,]),'ASSIGN':([7,],[11,]),'NUMBER':([8,9,11,20,21,22,23,],[15,15,15,15,15,15,15,]),'PLUS':([12,13,14,15,16,17,18,26,27,28,29,],[20,-10,-13,-14,-15,20,20,-8,-9,-11,-12,]),'MINUS':([12,13,14,15,16,17,18,26,27,28,29,],[21,-10,-13,-14,-15,21,21,-8,-9,-11,-12,]),'TIMES':([13,14,15,16,26,27,28,29,],[22,-13,-14,-15,22,22,-11,-12,]),'DIVIDE':([13,14,15,16,26,27,28,29,],[23,-13,-14,-15,23,23,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,12,17,25,],[3,10,19,24,30,]),'expression_statement':([0,2,12,17,25,],[4,4,4,4,4,]),'conditional_statement':([0,2,12,17,25,],[5,5,5,5,5,]),'loop_statement':([0,2,12,17,25,],[6,6,6,6,6,]),'expression':([8,9,11,],[12,17,18,]),'term':([8,9,11,20,21,],[13,13,13,26,27,]),'factor':([8,9,11,20,21,22,23,],[14,14,14,14,14,28,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','zara_parser.py',9),
  ('statement_list -> statement','statement_list',1,'p_statement_list','zara_parser.py',13),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','zara_parser.py',14),
  ('statement -> expression_statement','statement',1,'p_statement','zara_parser.py',21),
  ('statement -> conditional_statement','statement',1,'p_statement','zara_parser.py',22),
  ('statement -> loop_statement','statement',1,'p_statement','zara_parser.py',23),
  ('expression_statement -> ID ASSIGN expression','expression_statement',3,'p_expression_statement','zara_parser.py',27),
  ('expression -> expression PLUS term','expression',3,'p_expression','zara_parser.py',31),
  ('expression -> expression MINUS term','expression',3,'p_expression','zara_parser.py',32),
  ('expression -> term','expression',1,'p_expression_term','zara_parser.py',36),
  ('term -> term TIMES factor','term',3,'p_term','zara_parser.py',40),
  ('term -> term DIVIDE factor','term',3,'p_term','zara_parser.py',41),
  ('term -> factor','term',1,'p_term_factor','zara_parser.py',45),
  ('factor -> NUMBER','factor',1,'p_factor_number','zara_parser.py',49),
  ('factor -> ID','factor',1,'p_factor_id','zara_parser.py',53),
  ('conditional_statement -> IF expression statement ELSE statement','conditional_statement',5,'p_conditional_statement','zara_parser.py',57),
  ('conditional_statement -> IF expression statement','conditional_statement',3,'p_conditional_statement','zara_parser.py',58),
  ('loop_statement -> WHILE expression statement','loop_statement',3,'p_loop_statement','zara_parser.py',65),
]
