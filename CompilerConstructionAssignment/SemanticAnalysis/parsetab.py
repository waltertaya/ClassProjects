
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIVIDE IDENTIFIER LBRACE LBRACKET LPAREN MINUS MULTIPLY NUMBER PLUS RBRACE RBRACKET RPAREN TYPEempty :program : declaration_listdeclaration_list : declaration_list declaration\n                        | declaration\n                        | emptyblock : LBRACE declaration_list RBRACEdeclaration : function_declaration\n                   | variable_declarationparameter_list : parameter_list COMMA TYPE IDENTIFIER\n                      | TYPE IDENTIFIER\n                      | emptyfunction_declaration : TYPE IDENTIFIER LPAREN parameter_list RPAREN blockvariable_declaration : TYPE IDENTIFIER ASSIGN expressionexpression : term\n                  | expression PLUS term\n                  | expression MINUS termterm : factor\n            | term MULTIPLY factor\n            | term DIVIDE factorfactor : NUMBER\n              | IDENTIFIER'
    
_lr_action_items = {'$end':([0,1,],[-1,0,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'empty':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> empty","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','zara_parser.py',9),
  ('program -> declaration_list','program',1,'p_program','zara_parser.py',13),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','zara_parser.py',18),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','zara_parser.py',19),
  ('declaration_list -> empty','declaration_list',1,'p_declaration_list','zara_parser.py',20),
  ('block -> LBRACE declaration_list RBRACE','block',3,'p_block','zara_parser.py',25),
  ('declaration -> function_declaration','declaration',1,'p_declaration','zara_parser.py',29),
  ('declaration -> variable_declaration','declaration',1,'p_declaration','zara_parser.py',30),
  ('parameter_list -> parameter_list COMMA TYPE IDENTIFIER','parameter_list',4,'p_parameter_list','zara_parser.py',35),
  ('parameter_list -> TYPE IDENTIFIER','parameter_list',2,'p_parameter_list','zara_parser.py',36),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','zara_parser.py',37),
  ('function_declaration -> TYPE IDENTIFIER LPAREN parameter_list RPAREN block','function_declaration',6,'p_function_declaration','zara_parser.py',42),
  ('variable_declaration -> TYPE IDENTIFIER ASSIGN expression','variable_declaration',4,'p_variable_declaration','zara_parser.py',51),
  ('expression -> term','expression',1,'p_expression','zara_parser.py',55),
  ('expression -> expression PLUS term','expression',3,'p_expression','zara_parser.py',56),
  ('expression -> expression MINUS term','expression',3,'p_expression','zara_parser.py',57),
  ('term -> factor','term',1,'p_term','zara_parser.py',61),
  ('term -> term MULTIPLY factor','term',3,'p_term','zara_parser.py',62),
  ('term -> term DIVIDE factor','term',3,'p_term','zara_parser.py',63),
  ('factor -> NUMBER','factor',1,'p_factor','zara_parser.py',67),
  ('factor -> IDENTIFIER','factor',1,'p_factor','zara_parser.py',68),
]
